### React - Transferring Props

A quick introduction to transferring `props` in the React JavaScript library. Further details are available at the [React](http://facebook.github.io/react/) website. These notes are based in part on the online [docs](http://facebook.github.io/react/docs/jsx-in-depth.html).

#### Contents
* Intro
* Manual transfer
* Abstracting & Destructuring
* Consume & Transfer
* Rest & Spread

##### Intro
A common pattern in React is to wrap a component in an abstraction. The outer component is used to expose a simple property for use in the app, which can then be used for more complex implementation.

According to the React online [docs](https://facebook.github.io/react/docs/transferring-props.html), here are a few best practices for working with `props`.

##### Manual transfer
For most code examples, it will be sufficient to simply pass `props` down. This has the inherent benefit of only exposing a specific subset of the inner API, and a specific one we know will work.

##### Abstracting & Destructuring
Whilst manual transfer will become commonplace for many apps, it can also quickly become fragile and tedious for some `props`. We can specify `props` to consume within a component, and then pass along `other`. For example,

```
var { title, author, ...other } = this.props;
```

With the above example, we are explicitly consuming `title, author`, and then we're able to pass along the `other` props. React requires that we always use this style of destructuring pattern when passing along unknown `other` props.

##### Consume & transfer same `prop`
We can also explicitly consume and pass a `prop` without using the standard `this.props`. For example,

```
var title = this.props.title;
...
return (
  <li title={title}>
    ...
  </li>
);
```

##### Rest & Spread Props
Rest properties are a useful way to extract any remaining properties from an object into a new object. This excludes every other `prop` explicitly listed in the defined destructuring pattern. For example,

```
var { a, b, ...other} = { a: 1, b: 2, c: 3, d: 4, e: 5 };
...
a; //will be 1
b; //2
other; //will include { c: 3, d: 4, e: 5 }
```
