### React - Introduction to multiple components

A quick introduction to multiple components in the React JavaScript library. Further details are available at the [React](http://facebook.github.io/react/) website. These notes are based in part on the online [docs](http://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html).

#### Contents
* Introduction
* Ownership
  * Children
	* Reconciliation
* Data flow

##### Introduction
Considered one of React's best features, composability allows a developer to build modular components that re-use other components. This gives a developer many of the same benefits as functions or classes. In effect, we can *separate different concerns* within an application simply by building new components.

##### Ownership
With React, ownership allows a defined parent component to use other components as children. In effect, the parent component becomes a way to unite disparate components to build an app etc.

The parent or owner is the component that sets `props` of the other components. For example, in React if a component *A* is created in another component's, component *B*, `render()` method, then *B* owns *A*.

This ownership also means that component *A* cannot mutate its own `props`, they should always be consisten with what its owners sets. This is one of the key aspects that helps React guarantee consistent UIs.

In this context, ownership is a React specific context. The standard *parent/child* relationship still exists in a traditional tree structure, such as the DOM. For example, a standard HTML `div` will be the parent to its child elements, such as a `p` or `span`.

###### Children
When we instantiate a React component, we can also include additional components or JavaScript expression as children. For example,

```
<Parent>
	<Child />
</Parent>
```

The `Parent` is then able to read the children by using the specific `this.props.children` property.

**NB:** `this.props.children` is an *opaque data structure*, and we can use *React.Children* utilities to manipulate them.

###### Reconciliation
In React, this is the process that updates the DOM with each new render pass. For *children*, they are reconciled according to the order in which they are rendered. For example,

```
//Render 1
<Text>
	<p>Para 1</p>
	<p>Para 2</p>
</Text>
//Render 2
<Text>
	<p>Para 2</p>
</Text>
```

Whilst we can see that `<p>Para 1</p>` has been removed, React reconciles the DOM by changing the text content of the first child, and then deleting the second child. It's the order that determines the reconciliation.

###### Dynamic
To handle new items added to the DOM, or shuffled in order, we can add unique identifiers using a `key`. This allows us to maintain the identity and state of each child across multiple render passes.

As React reconciles these keyed children, it ensures that any child with a `key` will be re-ordered or destroyed to ensure the integrity of the DOM.

**NB:** the `key` should *always* be supplied directly to the components in the array etc, and not to the container HTML.

##### Data flow
Data flows in one direction in React, namely from parent to child. This helps to make components nice and simple, and predictable as well.

In essence, components take *props* from the parent, and then render. If a *prop* has been changed, for whatever reason, React will update the component tree for that change, and then re-render any components that used that property.

Internal state also exists for each component, and should only be updated within the component itself.
