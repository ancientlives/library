### React - Advanced - Animations

A quick introduction to animations in the React JavaScript library. Further details are available at the [React](http://facebook.github.io/react/) website.

#### Contents
* Intro
* CSS transition groups

##### Intro
React has a *Transition Groups* addon, which works with CSS3 to help incorporate animated transitions in React based apps.

Unlike most animation libraries or plugins, which traditionally use an imperative approach, such as selecting an element and then moving it around or modifying its style to create animation, React employs a more declarative approach. This is due to the core nature of React, which employs the render and re-render approach.

CSS *transition groups* enable css animations for transitions, effectively modifying classes during appropriate timed renders and re-renders.

##### Animation options
So, what can we actually do with animations in React? For example, we can now

* animate transitions between states using CSS3 and Transition Groups
* animate outside CSS, such as scroll position and Canvas drawing by using `requestAnimationFrame`
* fall back to `setTimeout` when `requestAnimationFrame` is not a viable option

##### CSS transition groups
Too be able to use *transition group* with our app, we need to initally include our animation add-on near the top of our component file. For example,

```
var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup
```

This add-on automatically handles re-rendering of the component at appropriate times by altering the transition group's class to fit the correct situation within the transition. So, this connects an element to four CSS classes,

* ...-enter
* ...-enter-active
* ...-leave
* ...-leave-active

The *CSSTransitionGroup* add-on will automatically add and remove these classes, prefixed with the value of the `transitionName` attribute, as child components enter or leave the *ReactCSSTransitionGroup* component. For example,

```

```
