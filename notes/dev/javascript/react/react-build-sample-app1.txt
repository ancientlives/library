### React - Build a Sample App 1

A quick overview of building a basic sample app with the React JavaScript library. Further details are available at the [React](http://facebook.github.io/react/) website.

#### Contents
* Introduction
* Setup
  * server
  * initial HTML
* First component
* Composing components
* Working with props
* Add Markdown support
* Add a data model
  * fetch json data from server
* Reactive State

##### Introduction
This note focuses on how to build a basic sample application with the [React](http://facebook.github.io/react/) JavaScript library.

It follows the example *comments* application available in the React [Tutorial](http://facebook.github.io/react/docs/tutorial.html).

This app includes the following basic features,

* rendered output view of all of the comments
* a simple form to submit new comments
* hooks, where applicable, to provide a custom backend for the application

It will also include some quirky test features,

* optimistic commenting - comments will appear in the rendered output view before they're saved to the server
* live updates - comments created by other users will be added to the rendered output view in real time
* Markdown formatting - comment creation will support Markdown formatting

##### Setup
A few quick requirements to setup our basic application. This app assumes you have downloaded the latest version of the `react.js` and `JSXTransformer.js` files from the React website.

###### Server
To run and test this application, in particular the `POST` requirements, we need to setup and use a server. React provides a number of simple example servers, which can be downloaded from their [GitHub repository](https://github.com/reactjs/react-tutorial/). These simple servers are currently available in Node, Python, Ruby, PHP, and Go.

###### Initial HTML
The default HTML template for this basic app is as follows,

```
<!DOCTYPE html>
<html>
  <head>
    <title>Hello React</title>
    <!-- required react files -->
    <script src="build/react.js"></script>
    <script src="build/JSXTransformer.js"></script>
  </head>
  <body>
    <div id="content"></div>
    <script type="text/jsx">
      // Your code here
    </script>
  </body>
</html>
```

Our React JavaScript code will be added between the script tags in the body. However, we would normally abstract such code to a separate file.

##### First component
One of the fundamental precepts of React is the development and implementation of modular, composable components.

For the comment box component, we need the following structure

```
- CommentBox
  - CommentList
    - Comment
  - CommentForm
```

The `CommentBox` itself is simply a basic `<div>` element

```
var CommentBox = React.createClass({
  render: function() {
    return (
      <div className="commentBox">
      Hello World
      </div>
    );
  }
});
React.render(
  <CommentBox />,
  document.getElementById('content')
);
```

Again, this is using JSX which is then translated by the JSX precompiler to plain JavaScript. It works as follows,

* methods passed in a JavaScript object to `React.createClass()`
  * creates a new React component
  * most important method is called `render`
  * `render` returns a tree of React components, which is eventually rendered to HTML

**NB:** the `div` tags are not actually DOM nodes. Instead, they are safe instantiations of pre-defined React `div` components. In effect, they are markers or simply pieces of data that React knows how to handle.

Also, it's worth noting that we do not have to return raw HTML. We are, in fact, returning a tree of components.

##### Composing components
We now need to build basic outlines for our `CommentList` and `CommentForm` components. These components will also be simple `<div>` elements.

For example, `CommentList`

```
var CommentList = React.createClass({
  render: function() {
    return (
      <div className="commentList">
        Hello World - React CommentList.
      </div>
    );
  }
});
```

and for `CommentForm`

```
var CommentForm = React.createClass({
  render: function() {
    return (
      <div className="commentForm">
        Hello World - React CommentForm.
      </div>
    );
  }
});
```
We now need to update the parent component, `CommentBox`, to use these new components.

```
var CommentBox = React.createClass({
  render: function() {
    return (
      <div className="commentBox">
      <h1>Comments</h1>
      <CommentList />
      <CommentForm />
      </div>
    );
  }
});
...
```

and then we render the parent component as before.

**NB:** the above components include regular HTML elements, which React uses as regular components. However, the JSX compiler automatically rewrites these HTML tags to `React.creatElement(tagName)` expressions, and then leaves everything else the same. This is done by React to ensure the global namespace is not polluted.

##### Working with props
We now need to create the `Comment` component, which depends on data passed from the parent. This data is available in React as a property on the child component.

Such properties are accessed via `this.props`. Using these `props`, we can read the data passed to the `Comment` component from the `commentList` component, and then render some markup.

```
var Comment = React.createClass({
  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        {this.props.children}
      </div>
    );
  }
});
```

Here we are accessing named attributes passed to the component as keys on `this.props`. Therefore, `this.props.author`, and then any nested elements as `this.props.children`.

After defining the `Comment` component, we can pass the author's name and comment text. This abstraction allows us to reuse the same code for each unique comment. So, we'll now add some comments to our `CommentList`

```
var CommentList = React.createClass({
  render: function() {
    return (
      <div className="commentList">
        <Comment author="ancientlives">This is the first comment...</Comment>
        <Comment author="fulcanelli">Another comment...</Comment>
      </div>
    );
  }
});
```

We have now passed some data from the parent component, `CommentList`, to the child components, `Comment`. In this example, we have passed

* author names via an attribute, `author`
* comment text via an XML-like child node, `Another comment...`

Each of the above are passed to the `Comment` component. This component is able to access these properties using `this.props.author` and `this.props.children`.

##### Add Markdown support
Markdown is a quick and easy way to format inline text. To use Markdown in our application, we need to add support via the [marked](http://www.javascriptoo.com/marked) JavaScript library. We can add this in the `<head>` of our application with the usual link.

```
<script src="build/marked.min.js"></script>
```

We can now use this library to convert our comment text to Markdown, and then render for viewing.

```
var Comment = React.createClass({
  render: function() {
    return (
      <div className="comment">
        <h2 clasName="commentAuthor">
          {this.props.author}
        </h2>
        {marked(this.props.children.toString())}
      </div>
    );
  }
});
```

In this example, we call the *marked* library and use it to convert `this.props.children` from React's wrapped text to a raw string that *marked* is able to understand. This is why we use the `toString()` method from the *marked* library.

However, if we now render this output we will see React responding to a perceived XSS attack. It simply render the HTML tags as text and not element tags. There is a way around this, which uses the React option `sanitize`. So, we set `sanitize: true`, which tells *marked* to escape any HTML markup in the source instead of passing it through unchanged as above.

```
var Comment = React.createClass({
  render: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML = {{__html: rawMarkup}} />
      </div>
    );
  }
});
```

This allows us to now output correct raw HTML for browser rendering.

##### Add a data model
Instead of hard-coding our comments, we need to consider a better data model. The first thing to consider is using JSON to store our dynamic list of comments and data.

```
var data = [
  {author: "ancientlives", text: "this is JSON comment"},
  {author: "fulcanelli", text: "this is a second JSON comment"}
];
```

To make this data useful in an abstracted manner, we need to add it in a modular way. Therefore, we need to modify our code to allow this data to be passed into `CommentList` via `props`.

```
var CommentBox = React.createClass({
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.props.data} />
        <CommentForm />
      </div>
    );
  }
});

React.render(
  <CommentBox data={data} />,
  document.getElementById('content')
);
```

Now, we need to update our `CommentList` component to enable correct dynamic rendering of the comment data.

```
var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});
```

###### Fetch JSON data from server
We can also abstract our JSON data so it is correctly fetched from the server instead of hard coding the data.

We need to remove the hard-coded `prop` for the data, and replace it with a URL for the JSON.

```
...
React.render(
  <CommentBox url="comments.json" />
  document.getElementById('content')
);
```

However, this is not enough to render the data from the JSON file. We now need to consider and implement state in our application.

##### Reactive state
By using `props`, each component has rendered itself once. This is because `props` are considered *immutable*, passed from the parent who is the owner.

To implement interactions, *mutable* `state` needs to be added to the component. React's `this.state` is private to the component, which allows us to change it by calling `this.setState()`. As a result, when this state updates, the component itself re-renders as well.

As the server fetches the data, we need to store it somewhere to allow us to update the comments. We can add an array for this data to the `CommentBox`.

```
var CommentBox = React.createClass({
  getInitialState: function() {
    return {data: []};
  }
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm />
      </div>
    );
  }
});
```

**NB:** `getInitialState` executes only once during the lifecycle of the component, thereby setting the initial state of the component.
