### React - Build a Sample App 1

A quick overview of building a basic sample app with the React JavaScript library. Further details are available at the [React](http://facebook.github.io/react/) website.

#### Contents
* Introduction
* Setup
  * server
  * initial HTML
* First component
* Composing components
* Working with props

##### Introduction
This note focuses on how to build a basic sample application with the [React](http://facebook.github.io/react/) JavaScript library.

It follows the example *comments* application available in the React [Tutorial](http://facebook.github.io/react/docs/tutorial.html).

This app includes the following basic features,

* rendered output view of all of the comments
* a simple form to submit new comments
* hooks, where applicable, to provide a custom backend for the application

It will also include some quirky test features,

* optimistic commenting - comments will appear in the rendered output view before they're saved to the server
* live updates - comments created by other users will be added to the rendered output view in real time
* Markdown formatting - comment creation will support Markdown formatting

##### Setup
A few quick requirements to setup our basic application. This app assumes you have downloaded the latest version of the `react.js` and `JSXTransformer.js` files from the React website.

###### Server
To run and test this application, in particular the `POST` requirements, we need to setup and use a server. React provides a number of simple example servers, which can be downloaded from their [GitHub repository](https://github.com/reactjs/react-tutorial/). These simple servers are currently available in Node, Python, Ruby, PHP, and Go.

###### Initial HTML
The default HTML template for this basic app is as follows,

```
<!DOCTYPE html>
<html>
  <head>
    <title>Hello React</title>
    <!-- required react files -->
    <script src="build/react.js"></script>
    <script src="build/JSXTransformer.js"></script>
  </head>
  <body>
    <div id="content"></div>
    <script type="text/jsx">
      // Your code here
    </script>
  </body>
</html>
```

Our React JavaScript code will be added between the script tags in the body. However, we would normally abstract such code to a separate file.

##### First component
One of the fundamental precepts of React is the development and implementation of modular, composable components.

For the comment box component, we need the following structure

```
- CommentBox
  - CommentList
    - Comment
  - CommentForm
```

The `CommentBox` itself is simply a basic `<div>` element

```
var CommentBox = React.createClass({
  render: function() {
    return (
      <div className="commentBox">
      Hello World
      </div>
    );
  }
});
React.render(
  <CommentBox />,
  document.getElementById('content')
);
```

Again, this is using JSX which is then translated by the JSX precompiler to plain JavaScript. It works as follows,

* methods passed in a JavaScript object to `React.createClass()`
  * creates a new React component
  * most important method is called `render`
  * `render` returns a tree of React components, which is eventually rendered to HTML

**NB:** the `div` tags are not actually DOM nodes. Instead, they are safe instantiations of pre-defined React `div` components. In effect, they are markers or simply pieces of data that React knows how to handle.

Also, it's worth noting that we do not have to return raw HTML. We are, in fact, returning a tree of components.

##### Composing components
We now need to build basic outlines for our `CommentList` and `CommentForm` components. These components will also be simple `<div>` elements.

For example, `CommentList`

```
var CommentList = React.createClass({
  render: function() {
    return (
      <div className="commentList">
        Hello World - React CommentList.
      </div>
    );
  }
});
```

and for `CommentForm`

```
var CommentForm = React.createClass({
  render: function() {
    return (
      <div className="commentForm">
        Hello World - React CommentForm.
      </div>
    );
  }
});
```
We now need to update the parent component, `CommentBox`, to use these new components.

```
var CommentBox = React.createClass({
  render: function() {
    return (
      <div className="commentBox">
      <h1>Comments</h1>
      <CommentList />
      <CommentForm />
      </div>
    );
  }
});
...
```

and then we render the parent component as before.

**NB:** the above components include regular HTML elements, which React uses as regular components. However, the JSX compiler automatically rewrites these HTML tags to `React.creatElement(tagName)` expressions, and then leaves everything else the same. This is done by React to ensure the global namespace is not polluted.

##### Working with props
We now need to create the `Comment` component, which depends on data passed from the parent. This data is available in React as a property on the child component.

Such properties are accessed via `this.props`. Using these `props`, we can read the data passed to the `Comment` component from the `commentList` component, and then render some markup.

```
var Comment = React.createClass({
  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        {this.props.children}
      </div>
    );
  }
});
```

Here we are accessing named attributes passed to the component as keys on `this.props`. Therefore, `this.props.author`, and then any nested elements as `this.props.children`.

After defining the `Comment` component, we can pass the author's name and comment text. This abstraction allows us to reuse the same code for each unique comment. So, we'll now add some comments to our `CommentList`

```
var CommentList 
```
