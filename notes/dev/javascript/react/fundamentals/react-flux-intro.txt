### React - Fundamentals - Flux

A quick introduction to Flux in the React JavaScript library. Further details are available at the [React](http://facebook.github.io/react/) website.

#### Contents
* Introduction
* Components
  * dispatcher
  * store

##### Introduction
Flux is a useful way to retrieve data from a server API or other data store, whilst maintaining a perceived decoupling of components on the client side. It employs a one-way, uni-directional protocol for communication, which helps maintain this separation of concerns.

Flux has become the preferred option for retrieving server data using React. They are not reliant on each other, but they were designed to work together.

In effect, Flux works as follows

* user initiates an action in the view
  * view handles by sending request for data
* the data store executes the request
  * event is emitted when data is retrieved
  * event open to all listening
* listeners receive the event
  * update views accordingly

##### Components
This process can be considered to contain the following components

* view
* dispatcher
* store
* event emitter

###### Dispatcher
This is responsible for receiving the action requests from the view, and then passing to the required data store or stores. Each applicable data store registers with the *dispatcher* to be able to receive updates when an action is sent. The *constructor* for a data store will register a callback with the *dispatcher*.

In effect, when an action is *dispatched*, the callback will be executed. However, only the actions pertinent to this given *dispatcher* will ever get executed.

**NB:** the React *Bower* package provides a *dispatcher* class ready for use...

Therefore, the *dispatcher* is considered the first, initial step in accessing the required data on the client side.

###### Store
