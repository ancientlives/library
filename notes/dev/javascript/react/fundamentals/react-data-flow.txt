### React - Fundamentals - Data Flow

A quick introduction to data flow in the [React](http://facebook.github.io/react/) JavaScript library.

#### Contents
* Introduction
* Properties (`props`)
  * `props` with JSX
  * PropTypes
	* getDefaultProps
	* State
* Using state and props

##### Introduction
Data flows in one direction in React, namely from parent to child. This helps to make components nice and simple, and predictable as well.

In essence, components take *props* from the parent, and then render. If a *prop* has been changed, for whatever reason, React will update the component tree for that change, and then re-render any components that used that property.

Internal state also exists for each component, and should only be updated within the component itself.

##### Properties (`props`)
Properties, or `props`, can hold any data and are passed to a component for usage. As developers, we can set `props` on a component during instantiation

```
var classics = [{ title: 'Greek'}];
<ListClassics classics={classics}/>
```

We can also use the `setProps` method on a given instance of a component.

```
var ListClassics = React.createClass({
  render: function() {
    return (
      <li className="classic">{this.props.classics}</li>
    );
  }
});

var classics = [{ title: 'Greek'}];
var listClassics = React.render (
  <ListClassics/>,
	document.getElementById('example')
);

listClassics.setProps({ classics: classics });
```

However, this option should only really be used to set `props` on a child component or outside of the component tree.

**NB:** we can access `props` via `this.props`, as noted above, but it should not be used to write directly to `props`. In effect, a component should not modify its own props.

###### `props` with JSX
If used with JSX, `props` can be set as a string,

```
<a href='/classics/add'>Add Classics</a>
```

We can also set the `props` using the `{}` syntax, which allows us to pass variables of any type via JavaScript injection.

```
<a href={'/classics/' + classic.id}>{classic.title}</a>
```

We can also pass event handlers as `props`,

```
var EditButton = React.createClass({
	render: function() {
		return (
			<a className='button edit' onClick={this.handleClick}>Edit</a>
		);
	},
	handleClick: function() {
	//handle click...
  alert('edit button clicked...');
  //add some JQuery
  $('li.classics').empty().append('Roman');
	}
});
```

###### Proptypes
We can use React to validate our `props` using a config object defined on a given component. Using `propTypes` we are effectively ensuring that a component matches the given requirements. For example,

```
var classicRow = React.createClass({
	propTypes: {
		classic: React.PropTypes.shape({
			id: React.PropTypes.number.isRequired
		}).isRequired,
		onClick: React.PropTypes.func
	},
	//......
});
```

Therefore, if the `propTypes` requirements are not fulfilled upon instantiation of the component, a `console.warn` will be returned and logged.

If want to set optional `props` we can simply omit the `.isRequired` flag.

**NB:** `propTypes` are not considered a required part of an application, but they provide a useful way to describe the API of a component.

###### getDefaultProps
We use the `getDefaultProps` function on a component to provide a default set of properties. This is used only for `props` that are not previously defined as required. For example,

```
var classicTable = React.createClass({
	getDefaultProps: function() {
		return {
			classics: []
		};
	}
	//......
});
```

**NB:** `getDefaultProps` is not called during instantiation of a component. Instead, it is called as soon as `React.createClass` is called to cache the value. Therefore, we are unable to use any instance specific data in this method.

###### State
A component in React is able to house *state*. *State* is inherently different from `props` because it is internal to the component. However, it is particularly useful for deciding a view state on an element. For example, we could use *state* to track when to show certain options within a hidden list or menu. We can track the current state, change it relative to component requirements, and then show options based upon this amended state.

**NB:** it is considered bad practice to update state directly using `this.state`. Instead, we should use the method `this.setState`. For example,

```
var EditButton = React.createClass({
  getInitialState: function() {
    return {
      editShow: true
    };
  },
  render: function() {
    if (this.state.editShow == false) {
      alert('edit button will be turned off...');
      $('button.edit').fadeOut();
    }
    return (
      <button className="button edit" onClick={this.handleClick}>Edit</button>
    );
  },
  handleClick: function() {
  //handle click...
  alert('edit button clicked');
  $('li.classic').empty().append('Roman');
  //set state after button click
  this.setState({ editShow: false });
  }
});
```

##### Using state and props
As developers, try to avoid storing computed values or components directly in *state*. Instead, we should be focusing upon using simple data directly required for the given component to function correctly.

It is considered better practice to perform required calculations in the `render` function.

We should also try to avoid duplicating `prop` data into `state`. Use the `props` date instead.
