### React - Fundamentals - Forms

A quick introduction to using forms in the React JavaScript library. Further details are available at the [React](http://facebook.github.io/react/) website.

#### Contents
* Intro
* Uncontrolled components
* Controlled components
* Form events
* Label
* Textarea and Select
* Names and form elements
* Multiple form elements and change handlers
* Focus

##### Intro
As with other aspects of one-page applications, React helps to manage `state` for forms. There are two types of form components in React, which include *controlled* and *uncontrolled*.

##### Uncontrolled components
In a strange way, *uncontrolled* can be considered a type of anti-pattern for how many other components are constructed in React.

So, if we consider a HTML form we can certainly see that it works differently to React components. For example, HTML `input` may be given a value, which can then be mutated by the `input`. This is where the name originates, effectively because the form component's value is *Uncontrolled* by a React component.

An *Uncontrolled* component is also of little use unless we can access the value. However, in order to access this value we need to add a `ref` to the `input`, and then access the `DOMNode` value.

A `ref` is a special *non-DOM* attribute, which we can use to identify a component within its local context `this`. Also, all `refs` are added to `this.refs` for easier access.

For example,

```
//basic input and output to alert...
  var BasicForm = React.createClass({
    formSubmit: function(e) {
      e.preventDefault();
      var basicText = React.findDOMNode(this.refs.basicInput).value;
      alert(basicText);
    },
    render: function() {
      return (
        <form onSubmit={this.formSubmit}>
          <input
          ref="basicInput"
          type="text"
          defaultValue="basic input..." />
          <br />
          <button
            type="submit">
            Submit
          </button>
        </form>
      );
    }
  });

  React.render(<BasicForm />, document.getElementById('example'));
```

Uncontrolled components are particularly useful for basic forms. In particular, those forms that do not require special validation or input controls.

##### Controlled components
As you might imagine, *controlled* components follow the same pattern as standard React components. In effect, the state of the form component is controlled by React, with its value stored in `state`.

So, we can now store the value of a form's `input` in the `state` of the parent component. We can modify the above example, and use the following data flow

* `getInitialState` sets the `defaultValue`
* `input` value is set during `render`
* `onChange` of the `input` value causes the defined change handler to be called
* this change handler now updates the app's `state`
* `input` value is then updates duing the app's render

For example,

```
    //basic input and output to alert...
    var BasicForm = React.createClass({
      getInitialState: function() {
        return {
          formText: "ask me a question..."
        };
      },
      formChange: function(e) {
        this.setState({
            formText: e.target.value
        });
      },
      formSubmit: function(e) {
        e.preventDefault();
        alert(this.state.formText);
      },
      render: function() {
        return (
          <form onSubmit={this.formSubmit}>
            <input
              type="text"
              value={this.state.formText}
              onChange={this.formChange} />
            <br />
            <button type="submit">
              Submit
            </button>
          </form>
        );
      }
    });

    React.render(<BasicForm />, document.getElementById('example'));
```

Whilst this is more code than the `uncontrolled` version above, its inherent benefit is that it allows us to control the data flow and alter the `state` as the data is being entered by the user etc.

Therefore, we might want to change the case of the text from lower to upper in the `handleChange` function. We could also use this same technique to check form input, restrict characters entered, dynamically show how many characters are left in an input, add the text to a render div as its being typed, and so on...

For example,

```
    //basic input and output to alert...
    var BasicForm = React.createClass({
      getInitialState: function() {
        return {
          formText: "ask me a question..."
        };
      },
      formChange: function(e) {
        this.setState({
          //add option to update or check the value from input before setting state - eg: modify text to upper case...
            //formText: e.target.value
            //converts user input to upper case on the fly...
            formText: e.target.value.toUpperCase()
        });
      },
      formSubmit: function(e) {
        e.preventDefault();
        alert(this.state.formText);
      },
      render: function() {
        return (
          <form onSubmit={this.formSubmit}>
            <input
              type="text"
              value={this.state.formText}
              onChange={this.formChange} />
            <br />
            <button type="submit">
              Submit
            </button>
          </form>
        );
      }
    });

    React.render(<BasicForm />, document.getElementById('example'));
```

The primary update here is storing the value of the `input` in the state of the parent component. As noted in the React documentation,

> State should contain data that a component's event handler may change to trigger a UI update.

In this example, as a user enters text we are updating the data in `state`. which triggers a UI update and re-render. Our data flow can now be defined as follows,

* `getInitialState` sets the `defaultValue`
* `input` value is set in `render`
* value change in `input` causes handler `onChange` to be invoked with method `formChange`
* change handler method `formChange` updates `state`
* `input` value is now updated during the `render`

Therefore, this update to a controlled component allows us to control updating the `state`, and manipulate values, text etc dynamically as the user types, for example.

Another interesting point is that as we dynamically re-render the UI for the state change in the input, there is no discernible flicker in the browser. This is because React is intercepting the native browser change event. We can use a similar pattern for many different updates including, for example, counting characters, checking input again certain values etc...

##### Form events
React supports all of the events produced by HTML. It follows *camel case* naming conventions, and converts these events to *synthetic events*. Thankfully, they are also standardised, thereby creating a useful common interface for cross-browser development.

Therefore, all synthetic events give us acces to the originating `DOMNode` for the event via `event.target`. For example,

```
handleEvent: function(synthE) {
  var DOMNode = synthE.target;
  var updatedValue = DOMNode.value;
}
```

This is often an easy way to access the value of the *controlled* components.

##### Label
We can also add labels on form elements, which naturally helps with communication and accessibility for radios, checkboxes etc.

However, due to a reserved word conflict with JavaScript, React and JSX uses `htmlFor` to define the `for` attribute for such elements. For example,

```
//JSX
<label htmlFor="this is a label...">...</label>
```

This is rendered to HTML as follows,

```
//HTML
<label for="this is label...">...</label>
```

##### Textarea and select
When using React, we need to be aware of a few changes it makes to the interface of `textarea` and `select`. This is done to increase consistency and make it easier to manipulate.

For example, `textarea` has been modified to more closely resemble `input`. As developers, this allows us to specify `value` and a `defaultValue`. A controlled example is as follows,

```
<textarea
  value={this.state.textValue}
  onChange={this.handleChange} />
```

Likewise, `select` now accepts `value` and `defaultValue`. This allows us to set which option has been selected in the form, and allows for easier manipulation of the value. For example, controlled is as follows

```
<select
  value={this.state.selectValue}
  onChange={this.handleChange}>
    <option value="1">Option 1</option>
    <option value="2">Option 2</option>
</select>
```

Another useful feature, React supports multi select using an array.

##### Checkbox and radio buttons
As with standard HTML, checkboxes and radio buttons behave slightly differently with React. The main difference is that, in general, the value of a checkbox or radio button does not change. Instead, it is the `state` that is updated. Therefore, to control a checkbox or radio button input, we need to control the `checked` attribute. We can also use `defaultChecked` with an uncontrolled checkbox or radio input.

For example,

```
//basic checkbox with state and output to alert...
    var BasicForm = React.createClass({
      getInitialState: function() {
        return {
          checked: true
        };
      },
      formChange: function(e) {
        this.setState({
          checked: e.target.checked
        });
      },
      formSubmit: function(e) {
        e.preventDefault();
        alert(this.state.checked);
      },
      render: function() {
        return (
          <form onSubmit={this.formSubmit}>
            <input
              type="checkbox"
              value="1"
              checked={this.state.checked}
              onChange={this.formChange} />
            <br />
            <button type="submit">
              Submit
            </button>
          </form>
        );
      }
    });

    React.render(<BasicForm />, document.getElementById('example'));
```

In the above example, the value of `input` will remain `1`. We are not changing the value but the checked `state`.

##### Names and form elements
In React, for *controlled* components names on form elements carry less significance when a form's values are stored in `state`, and the form submit is being intercepted. This is because these form names are no longer required to access the form's values.

For *uncontrolled* form elements, we can use `refs` to access the form element directly.

However, importantly this does not mean we can dismiss `names` on form elements just because we are using React. They are still useful for the following general reasons,

* allow third party form serialisers to work within React
* required if the form is natively submitted
* used by the client's browser to complete autofill of common fields such as addresses etc...

##### Multiple form elements and change handlers
In React, with *controlled* form elements it is not necessary to create a change handler for each form element. There are a few different ways to achieve this type of re-use, but we'll look at using `bind` in the following example

```
//basic form with multiple elements and output to alert...
    var BasicForm = React.createClass({
      getInitialState: function() {
        return {
          nick_name: "",
          first_name: ""
        };
      },
      formChange: function(name, e) {
        var newState= {};
        newState[name] = e.target.value;
        this.setState(newState);
      },
      formSubmit: function(e) {
        e.preventDefault();
        var names = [
          this.state.nick_name,
          this.state.first_name
        ];
        alert(names.join(" or "))
      },
      render: function() {
        return (
          <form onSubmit={this.formSubmit}>
            <label htmlFor="nick_name">Nick Name:</label>
            <br />
            <input
              type="text"
              name="nick_name"
              value={this.state.nick_name}
              checked={this.state.checked}
              onChange={this.formChange.bind(this, 'nick_name')} />
            <br />
            <label htmlFor="first_name">First name:</label>
            <br />
            <input
              type="text"
              name="first_name"
              value={this.state.first_name}
              onChange={this.formChange.bind(this, 'first_name')}/>
              <br />
            <button type="submit">Submit</button>
          </form>
        );
      }
    });

    React.render(<BasicForm />, document.getElementById('example'));
```

We could also solve the above issue using *React.addons.LinkedStateMixin*, which adds the method `linkState` to a component. Effectively, `linkState` returns an object with two properties, `value` and `requestChange`. Using this mixin,

* `value` gets its value from `state` from the prop name supplied
* `requestChange` is a function that updates the named `state` with the new value

However, this mixin makes it harder to add custom modifications to the data flow. Therefore, it should normally only be used in limited circumstances.

##### Focus
Focus allows us to highlight to our users where they should direct their attention, or *focus*, within a form. React has implemented `autoFocus` for initial component loading to add focus assuming no other form input already has focus. React will then place focus on that input. For example,

```
//jsx
<input type="text" name="given_name" autoFocus="true" />
```

We can also set focus manually by calling `focus()` on the DOMNode for a given form field.
