### React - Fundamentals - Component Lifecycle

A brief overview of the component lifecycle in the [React](http://facebook.github.io/react/) JavaScript library.

#### Contents
* Introduction
* Methods in the lifecycle
  * Instantiation
  * Lifetime
  * Teardown

##### Introduction
In the lifecycle of a component, its props or state might change along with any accompanying DOM representation. In effect, a component is a known state machine, and it will always return the same output for a given input.

Following this logic, React provides components with certain *lifecycle* hooks. For example,

* creation
* lifetime
* teardown

So, we may consider these hooks first through the instantiation of the component, then its active lifetime, and finally its teardown.

 ##### Methods in the lifecycle
 React components include a minimal lifecycle API. This provides the developer with enough without being overwhelming, at least in theory.

 Relative to the lifecycle, we can consider the following methods

 ###### Instantiation
 This includes methods called upon instantiation, and they will be called initially in order for the selected component class.

 * `getDefaultProps`
   * called only once for the component class. Returned object is used to set default values for any new instances not specified by the parent component.
 * `getInitialState`
   * called only once for each instance of a component. It gives us the opportunity to initialise a custom state of each instance. It is, however, called once each time an instance is created. It is also gives us access to `this.props`.
 * `componentWillMount`
   * called before the initial `render`. Last chance to change the component state before the render method itself.
 * `render`
   * this method builds the virtual DOM itself. It is also the only required method for a component, and has specific rules to follow. These include
     * only accessible data is `this.props` and `this.state`
     * can return `null`, `false` or any other React component
     * cannot return an array of elements, only one top-level component
     * must be *pure*, which means it cannot change the state or modify the DOM output.
    * **NB:** the returned result is not the actual DOM, but a virtual representation. This is later compared, using DIFF, with the real DOM to determine if any changes are required.
 * `componentDidMount`
   * access the actual rendered DOM using this method via `this.getDOMNode`. This is the hook used to access the raw rendered DOM. For example, to use a custom JavScript plugin we could use this hook to access the raw DOM.

   **NB:** `getDOMNode` now appears to be deprecated, in React usage, and replaced with `findDOMNode` instead for certain examples...

For subsequent component class uses, the above methods, minus `getDefaultProps`, will be called in the above order.

An example for `componentDidMount` might be as follows,

```
componentDidMount: function() {
      var text = React.findDOMNode(this).textContent;
      alert('text = '+text);
      //use some JQuery...
      $(this.getDOMNode()).empty().append('some new text...');
}
```

###### Lifetime
At this stage, the component has now been rendered to the user for viewing and interaction. So, as a user interacts with the component, they are changing the state of that component or application, which allows us as developers to act on the relevant points in the component tree.

State changes for the application, which affect the component, result in the following methods being called in order.

* `componentWillReceiveProps`
  * a component's *props* may change at any time due to the parent component. This method is called as a result, which gives us an opportunity to change any new *props* object and also update the state. For example, the parent might be an input option. This responds to a state change by the users, which allows us as developers to update the component based upon the parent. If a new boolean is set by the parent, our component can be updated relative to this new value.
* `shouldComponentUpdate`
  * we can make React even faster by using this method to specify exactly when a component renders in the lifecycle. For example, if we are certain that new *props* or a state change will not require certain components to render we can set their render value to `false`. By setting `false`, we also ensure that the associated methods, `componentWillUpdate` and `componentDidUpdate`, are not called before and after the rendering of our component. **NB:** this method is not called during the initial render or after a `forceUpdate`.
* `componentWillUpdate`
  * this method is called directly before rendering when new *props* or state has been received. However, we can not update any state or *props* using this method. We need to use `compoentWillReceiveProps` instead.
* `render`
* `componentDidUpdate`
  * this method gives us the opportunity to update the rendered DOM.

###### Teardown
As React is finished with a component it must be unmounted from the DOM and destroyed. There is a single hook for this moment, which provides an opportunity to perform any cleanup and teardown as necessary.

* `componentWillUnmount`
  * as the life of a component ends, it is removed from the component hierarchy. This method gives us a chance to clean up just before the component is removed. For example, any custom work performed using `componentDidMount` needs to be undone here.
