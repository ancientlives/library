### React - Fundamentals - Composing Components

A quick introduction to the concept of composing components in the [React](http://facebook.github.io/react/) JavaScript library.

#### Contents
* Introduction
* Beyond HTML
* Example composition
  * assemble HTML
  * set props
  * drag and drop - HTML5

##### Introduction
As we use elements to build a basic page in HTML, so we use components with React plus the expressive benefits of JavaScript. In effect, with React the *only* thing we actually do is build components.

With React, an application is built using components. Basically, a component is a JavaScript function that accepts `props` and `state` as arguments, and outputs rendered HTML. Conceptually, they are normally designed to express and render a piece of data within an application, thereby acting as an extension of HTML.

##### Beyond HTML
Whilst React and JSX allow us to create custom elements using a syntax similar to HTML, they actually extend well beyond plain HTML. They allow us to control the behaviour of a component throughout its lifetime. The starting point for this is `React.createClass()`.

Instead of using inheritance, in its traditional form, React favours the concept of *composition*. This allows us to combine small, simple components and data objects, into larger and complex components. Therefore, instead of the MVC notion of extension, we compose our components to create an application.

Therefore, with React we are able to combine various child components to create an intricate, and ultimately powerful, resultant new component.

##### Example composition
A simple app that shows composition for a basic app.

* list of items (authors...) and render to the user
	* initial data loaded from static array
	* then JSON file
* user can select an item (author)
	* titles per author rendered to information panel
	* titles loaded from JSON file
	* then loaded from API etc

So, our hierarchy will initially resemble the following outline

* ListItems -> Item -> ItemLink

Each arrow can be considered representative of containing the following component. Therefore, ListItems has an Item, which has an ItemLink.

###### Assemble HTML
We need to assemble the components from the bottom-up. So, the first thing we need is a component for links.

For example, we can abstract HTML links as follows

```
var Link = React.createClass({
  render: function() {
    var props = this.props;
    var linkText = this.props.linkText;
    return (
      <a {...props}>
      {linkText}
      </a>
    );
  }
});
```
###### Set `props`
We can use JSX spread to output all of the required `props` for our HTML link. We can add the standard `href`, `title`, and `alt` for any of our links in any component. We can also pass as `props` the list item as the text for our link. We might also consider being strict in our definition of a link for our app using `propTypes`.

For example, we might want to specify the following

* `href` - required
* `title`
* `className`

```
...
propTypes: {
	href: React.PropTypes.string.isRequired,
	title: React.PropTypes.string,
	className: React.PropTypes.string
}
...
```

With the exception of the `href`, we can set a few basic defaults where a value is not passed as `props`. If we try to pass `props` to this component without `href` an error will be thrown in the *console* specifying the missing required `prop`. However, the rendering will still output the HTML assuming there isn't a render error as well. Useful for debugging...

To help with the `props`, we need to specify our default properties. We add these to the `getDefaultProps` method as follows

```
var Link = React.createClass({
	propTypes: {...},
	getDefaultProps: function() {
		return {
			title: 'a list link',
			className: 'list_link'
		}
	},
...
});
```

###### Drag and drop - HTML5
We can now add extra functionality allowing a user to drag and drop their preferred list item. To achieve this, we can add native HTML5 *drag and drop* to the app.

So, HTML5 drag and drop is based upon an attribute flag and associated events such as dragstart, dragend, drop, and so on.

We need to provide a function, such as `onDragStart`, for an initiated drag event. The passed event object will also contain an important property, 'dataTransfer'. It's important to realise that, unlike most browser events, `dataTransfer` must be modified before the end of the function.
