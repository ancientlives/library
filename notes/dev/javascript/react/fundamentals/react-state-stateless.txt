### React - Fundamentals - State and Stateless

A quick introduction to the concept of state and stateless in the React JavaScript library. Further details are available at the [React](http://facebook.github.io/react/) website.

#### Contents
* Introduction
* Stateless child components
* Stateful parent component
* An example app

##### Introduction
When designing React apps, we often think about stateless children and a stateful parent. As noted in the React documentation,

> A common pattern is to create several stateless components that just render data,
> and have a stateful component above them in the hierarchy that passes its state to
> its children via props.

So, we need to carefully consider how to identify and implement this type of component hierarchy.

##### Stateless child components
These components should be passed data via `props` from the parent. More importantly, to remain *stateless* they should not manipulate their `state`.

Instead, they should send a callback to the parent informing it of a change, update etc. The parent will then decide whether should result in a `state` change, and a re-rendering of the DOM.

##### Stateful parent component
A *stateful* parent component can exist at any level of the hierarchy. It does not have to be the root component for the app, but instead can exist as a child to other parents.

We use the parent component to pass `props` to its children, and maintain and update state for the applicable components.

##### An example app
The following is a simple app to allow us to test the concept of stateful parent and stateless child components. The resultant app outputs two parallel `div` elements, which allow a user to select one of the available categories, and then view all of the available *authors*.

**NB:** the simple grid layout uses Bootstrap.

```
//static test data...
var AUTHORS = [
	{id:1, category: 'greek', categoryId:1, author: 'Plato'},
  {id:2, category: 'greek', categoryId:1, author: 'Aristotle'},
  {id:3, category: 'greek', categoryId:1, author: 'Aeschylus'},
  {id:4, category: 'roman', categoryId:2, author: 'Livy'},
  {id:5, category: 'greek', categoryId:1, author: 'Euripides'},
  {id:6, category: 'roman', categoryId:2, author: 'Ptolemy'},
  {id:7, category: 'greek', categoryId:1, author: 'Sophocles'},
  {id:8, category: 'roman', categoryId:2, author: 'Virgil'},
  {id:9, category: 'roman', categoryId:2, author: 'Juvenal'}
];
```

We'll start with some static data to help populate our app. `categoryId` will be used to filter unique categories, and again to help get all of our authors per category.

For `stateless` child components, we need to be able to output a list of filtered, unique categories, and then a list of authors for each selected category.

Our first child component is the `CategoryList`, which filters and renders our list of unique categories. The `onClick` attribute is included, and state is therefore passed via callback to the `stateful` parent.

```
//output unique categories from passed data...
var CategoryList = React.createClass({
	render: function() {
		var category = [];
			return (
				<div id="left-titles" className="col-md-6 col-sm-6 col-xs-6">
					<ul>
						{this.props.data.map(function(item) {
						//JQuery get unique values for category...
						//if ($.inArray(item.category, category) > -1) {
						//plain JS - no support for legacy browsers...
						if (category.indexOf(item.categoryId) > -1) {
						} else {
							category.push(item.categoryId);
								return (
									<li key={item.id} onClick={this.props.onCategorySelected.bind(null, item.categoryId)}>
										{item.category}
									</li>
								);
							}
						}, this)}
					</ul>
				</div>
			);
		}
});
```

This component is accepting `props` from the parent component, and then informing this parent of a required change in state via a callback to the `onCategorySelected` method. It does not change `state` itself, it simply handles the passed data as required for a React app.

We now need to consider our second `stateless` child component, which renders the user's chosen authors per category. In effect, a user clicks on their chosen category, and a list of applicable authors is output to the right side div.

```
var AuthorList = React.createClass({
	render: function() {
    return (
      <div id="right-titles" className="col-md-6 col-sm-6 col-xs-6">
        <ul>
          {this.props.authors.map(function(item) {
            return (
              <li key={item.id}>
                {item.author}
              </li>
              );
            })
          }
        </ul>
      </div>
    );
  }
});
```

Again, this component does not set any state. It is simply rendering the passed `props` data for viewing.

To handle updates to the DOM, we need to consider our `stateful` parent. This component passes the app's data as `props` to the children, and handles the setting and updating of the `state` for app as well.
