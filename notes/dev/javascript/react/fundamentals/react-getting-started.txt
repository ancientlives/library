### React - Getting Started

A quick introduction to getting started with the React JavaScript library. Further details are available at the [React](http://facebook.github.io/react/) website.

#### Contents
* Introduction
* Hello World
* CommonJS

##### Introduction
React's getting started guide can be found at the following URL, [http://facebook.github.io/react/docs/getting-started.html](http://facebook.github.io/react/docs/getting-started.html).

##### Hello World
The first thing we need to do is download the latest copy of React's [Starter Kit](http://facebook.github.io/react/docs/getting-started.html). This gives us the required React JS file, the JSX transform JS file, and many examples and demos.

As with plain JavaScript, we can choose a number of different ways to store and access the JavaScript code. We can save it in the HTML file itself, in a separate file, or reference from a third party remote source.

We can also choose whether we want to use JSX, plain JavaScript, or pre-compile the former into the latter before deploying our application.

So, using the *Hello World* example

```
<!DOCTYPE html>
<html>
  <head>
    <title>Hello React!</title>
    <script src="build/react.js"></script>
    <script src="build/JSXTransformer.js"></script>
  </head>
  <body>
    <div id="example"></div>
    <script type="text/jsx">
      React.render(
        <h1>Hello React World!</h1>,
        document.getElementById('example')
      );
    </script>
  </body>
</html>
```

This uses the JSX Transformer to create plain JavaScript for rendering. However, we could also move the React JSX code to a separate file, which is normally preferable for abstraction.

We can also perform an offline transform using the *react-tools*, which are available as an *npm* package.

```
npm install -g react-tools
```

**NB:** if you install Node using a package manager, for example in Ubuntu, the you'll also need to create a symbolic link from `/usr/bin/nodejs` to `/usr/bin/node`.

This *npm* command simply installs the React tools with a global flag for all of our required React projects.

Using these tools, we can then translate our React code file, `src/helloworld.js` to plain JavaScript,

```
jsx --watch src/ build/
```
**NB:** the file `build/helloworld.js` is then autogenerated whenever we make a change in the original React code.

Our updated HTML source file is as follows,

```
<!DOCTYPE html>
<html>
	<head>
		<title>Hello React!</title>
		<!-- required react files -->
		<script src="build/react.js"></script>
		<!-- no need for JSX transformer if we use NPM package React tools... -->
		<!--<script src="build/JSXTransformer.js"></script>-->
	</head>
	<body>
		<div id="example"></div>
		<script src="build/helloworld.js"></script>
	</body>
</html>
```

##### CommonJS
As noted on the React [getting started](http://facebook.github.io/react/docs/getting-started.html) page, we can also use React with CommonJS. For example, with *browserify*, *webpack*, and other CommonJS compatible module systems. To use, simply install the `react` *npm* package. We can also integrate the `jsx` build tool with most packaging systems, in addition to CommonJS.
