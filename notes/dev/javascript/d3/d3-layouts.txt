### D3 - Data - Drawing

A brief overview of layouts with data using the [D3](http://d3js.org) Javascript library.

#### Contents
* Intro
* Pie Layout

##### Intro
Contrary to their name, **layouts** in D3 do not actually lay anything out in a visual 
sense of the term.

Instead, layouts take a given dataset and remap or transform it as required. This
creates *new* data, which can then be used for a specific rendering purpose.

There are many different built-in D3 layouts, including

* Bundle
* Chord
* Cluster
* Force
* Stack
...

##### Pie Layout
Naturally used to create visual pie charts with specified data. For example,

```
d3.layout.pie();
```

This built-in function helps us calculate the required measurements for our pie
chart, including an inner and outer radius for each wedge in the chart. It also 
calculates the starting and ending angles.

So, this calculation works relative to radians. So, as there 360 degress in a 
circle, there are 2π radians. So, a π radians equals 180 degress, or half a circle.

We can define a very simple pie chart layout as follows,

```
var pie = d3.layout.pie();
```

Arcs are defined as custom functions, and they require values for the inner and 
outer radius.

```
var w = 500;
var h = 500;

var outerRadius = w / 2;
var innerRadius = 0;
var arc = d3.svg.arc()
		.innerRadius(innerRadius)
		.outerRadius(outerRadius);
```

Then to draw some wedges in our pie chart we use the following

```
var svg = d3.select("body")
		.append("svg")
		.attr("width", w)
		.attr("height", h);
```

To add our new wedges, we need to create new groups for each incoming wedge. Then we
bind the new *pie* data to these new elements, and translate each group into the
centre of the chart so that the *paths* appear in the correct position.

```
//set up groups
var arcs = svg.selectAll("g.arc")
		.data(pie(dataset))
		.enter()
		.append("g")
		.attr("transform", "translate(" + outerRadius + "," + outerRadius + ")");
```

So, each newly created *g* is now saved as a reference in a variable **arcs**.

Then, within each new *g*, we need to append a *path*.

```
//draw arc paths
arcs.append("path")
	.attr("fill", function(d, i) {
		return color(i);
	})
	.attr("d", arc);
```

Our colours are being auto-generated by another built-in D3 function,

```
var color = d3.scale.category10();
```

The above `category10(0` function creates a set of colours using an ordinal scale
with an output range of 10 different colours.

Lastly, we need to generate text labels for each wedge in our pie chart.

```
arcs.append("text")
	.attr("transform", function(d) {
		return "translate(" + arc.centroid(d) + ")";
	})
	.attr("text-anchor", "middle")
	.text(function(d) {
		return d.value;
	});
```

**NB:** A **centroid** is the calculated centre point of any shape. This may include
a shape that is regular, such as a square, or a highly irregular outine. It will
calculate and return the centre point of any arc.

 

