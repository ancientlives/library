### Dev - Node - Databases

A brief overview of databases and their usage with *node.js*.

#### Contents
* Introduction
* MongoDB
  * Document oriented
  * BSON
  * Horizontal scaling with auto-sharding

##### Introduction
By its very nature, *node.js* supports *JSON* in a clean way. With this in mind, more traditional SQL databases are not 
a good fit. Therefore, *node.js* is better suited to document databases including,

* Cassandra
* MongoDB
* ReThinkDB
* Riak

*JSON* is a particularly good fit for these databases as it represents a document naturally. Some databases, including 
MongoDB, use a *JSON* superset as their own internal storage.

##### MongoDB
*MongoDB* is a document database, which includes a number of advantages over a traditional SQL databases.

##### MongoDB - Document Oriented
In a traditional SQL database, data is stored in tables and rows. MongoDB, by contrast, uses *collections* and *documents*.
A comparison is often made between a collection and a table. However, a document is quite different from a table. 

A document can contain a lot more data than a table. For example, in a SQL database we may decide to store user details, 
including `user_id`, `email`, `name` and so on, in multiple tables. We then join these tables to create a user record. 
However, with documents we simply store the data, id, email etc, and this will now be the only item in the database to 
store this data. 

A noted concern with this document approach is duplication of data for each user. This, however, is one of the trade-offs
between NoSQL (MongoDB) and SQL. 

In SQL, the goal of data structuring is to normalise as much as possible, thereby avoiding duplicated information. With 
MongoDB, there is a notably different goal. We are trying to provision a data store which is as easy as possible for the
application to use. Whilst updating the name of a given user role would be a tedious iterative process, accessing the user's role itself is considerably easier and quicker with NoSQL (MongoDB). The latter is the more common task
for an application accessing a database.

##### MongoDB - BSON
BSON is the format used by MongoDB to store its data. It is, effectively, JSON stored as binary with a few notable differences.
One of these differences is the `ObjectId` values, which is a data type used in MongoDB to uniquely identify documents. 
It is created automatically on each document in the database, and can be considered as analogous to a primary key in a 
SQL database.

The `ObjectId` is a large pseudo-random number. For nearly all practical occurrences, we can assume that this number will be
unique. The only situation where we might have a collision or clash in these numbers is if we were generating a large number in a short period of time. Evev with this scenario, we would need to be generating these numbers so fast that
the database would not be able to keep pace. Therefore, we can assume they're always unique.

The other interesting aspect of `ObjectId` is that they are partially based on a timestamp. Thsi allows us to determine
when they were created. 

A few other advantages of `BSON` over SQL rows and tables include,

* documents and objects in programming map naturally
* arrays and embedding of documents prevents the need for tradition SQL joins
* with the absence of achema, polymorphism is a lot easier

##### MongoDB - Horizontal scaling and auto-sharding
MomgoDB is also well suited to scaling. It supports horizontal scaling, which is simply the ability to add more machines
to a cluster, thereby increasing its scale.


