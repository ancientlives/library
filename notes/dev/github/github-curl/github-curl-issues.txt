### GitHub - cURL - Issues

Notes on using cURL to query GitHub for *Issues* data.
[GitHub API](https://developer.github.com/v3/issues/)

#### Contents
* General
  * List Issues
  * List Issues for a Repository
  * Get a Single Issue
* Assignees
  * List Assignees
  * Check Assignee
* Comments
  * List Comments on an Issue
  * List Comments in a Repository
  * Get a Single Comment
* Events
  * List Events for an Issue
  * List Events for a Repository
  * Get a Single Event  
* Labels
  * List all Labels for a Repository
  * Get a Single Label
  * List all Labels on an Issue
  * Get Labels for every Issue in a Milestone
* Milestones
  * List Milestones for a Repository
  * Get a Single Milestone

##### General - List Issues
It is currently possible to query for an authenticated user's repository issues. This includes the following options:

* List all issues for an authenticated user, including owned visible repositories, member repositories, and
organisation repositories.
* List all issues for an authenticated user, including owned visible and member repositories.
* List all issues for an authenticated user's specified organisation.

These queries can also be supplemented with the following parameters:

* direction (string) - A direction may be set for the sort order, which can either be ascending or descending. Default is descending.
* filter (string) - This filter indicates the type of issues to return. These can be one of the following:
  * all: all issues the authenticated user can see, regardless of creation or participation
  * assigned: issues assigned to the user
  * created: issues created by the user
  * mentioned: issues mentioning the user
  * subscribed: issues for subscribed updates for the user
  * NB: the default filter is *assigned*
* labels (string) - A comma separated list of label names
* since (string) - A specified date from which issues will be returned. Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
* sort (string) - Preferred sort order, which may include the following:
  * comments
  * created
  * updated
  * NB: the default sort oder is *created*
* state (string) - This indicates the state of the issues to return, which may include the following:
  * all
  * closed
  * open
  * NB: the default is *open*

##### General - List Issues for a repository
Get the latest issues for a specified repository. It will also accept the following parameters:

* assignee (string) - Name of a user, if specific. Otherwise *none* for issues with no assigned user, or \*\ for any user
* creator (string) - User that created the issue
* direction (string) - Direction of the sort, which can be either ascending or descending. NB: default is descending
* labels (string) - Comma separated list of label names
* mentioned (string) - User mentioned in the issue
* milestone (integer or string) - Integer refers to milestone number. String allows any milestone. NB: if the string is set to *none*, issues without milestones are returned
* since (string) - A specified date from which issues will be returned. Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
* sort (string) - Preferred sort order, which may include the following:
  * comments
  * created
  * updated
  * NB: the default sort oder is *created*
* state (string) - This indicates the state of the issues to return, which may include the following:
  * all
  * closed
  * open
  * NB: the default is *open*

##### General - Get a Single Issue
It's important to note with this request, that the API defines every pull request as an issue, but not every issues as a
pull request. It also notes that if the issue is not a pull request, the response omits the *pull_request* attribute.

 
##### Assignees - List Assignees
This will list all of the available assignees, including owner and collaborators, for issues.

*NB:* Returned results will need to be paged.

##### Assignees - Check Assignee 
It is also possible to check if a particular user has been assigned to a repository.

*NB:* If the returned result is true for the *assignee* login, then a *204* header is returned with no content.
Otherwise, it returns a *404* status code.

##### Comments - List comments on an issue
This will, naturally, list comments for a specified issue. The issues is defined with a specific number relative to a repository.

*NB:* Returned results will need to be paged

##### Comments - List comments in a repository
Returns a list of comments for a defined repository. This query may also include the following parameters:

* direction (string) - Defined direction, either *ascending* or *descending*. This parameter will be ignored without the 
*sort* parameter
* since (string) - A specified date from which issues will be returned. Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ
* sort (string) - This can be set to either *created* or *updated*. NB: Default is *created*

*NB:* Issue comments are ordered by *ascending* ID by default.

##### Comments - Get a single comment
This returns a single comment for an ID specified repository issue.

##### Events
This API option records various events, which occur due too an *Issue* or *Pull* request.

##### Events - List events for an issue
This return events relative to a defined issue number.

*NB:* Returned results will need to be paged

##### Events - List events for a repository
This returns all events for a defined repository.

*NB:* Returned results will need to be paged

##### Events - Get a single event
This returns data for a defined single event ID.
  
##### Labels
This API option returns defined labels for a repository, issue, and issues in a milestone.

##### Labels - List all labels for a repository
Returns all labels for a defined repository.

*NB:* Returned results will need to be paged

##### Labels - Get a single label
Checks a specified label against a defined repository. If the lavel is available, it will simply return 
the label's details. These currently include:

* url
* name
* colour (returned as a HEX colour code)

##### Labels - List labels on an issue
This returns any assigned labels for a defined issue.

*NB:* Returned results can be paged, if applicable

##### Labels - Get labels for every issue in a milestone
This will return any labels for every issue in a defined milestone.

*NB:* Returned results can be paged, if applicable 

##### Milestones
GitHub milestones are an action or event marking a significant change or stage in development.

##### Milestones - List Milestones for a Repository
This query will return all of the milestones for the defined repository.

*NB:* Returned results can be paged, if applicable

##### Milestones - Get a single milestone
Data returned for a single, numbered milestone.
